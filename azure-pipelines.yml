# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool: 
  name: 'my-self-hosted'
  demands:
  - agent.name -equals mywinagent-01

variables:
  solution: '*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  artifactName: 'dotnet-app'

stages:
  - stage: Build
    displayName: 'Build & SonarQube Analysis'
    jobs: 
      - job: BuildAndAnalyze
        steps:
        - task: NuGetToolInstaller@1
        - task: NuGetCommand@2
          inputs:
            restoreSolution: '$(solution)'
        - task: SonarQubePrepare@7
          inputs:
            SonarQube: 'SonarQube-server'
            scannerMode: 'dotnet'
            projectKey: 'hello-world'
        - task: VSBuild@1
          inputs:
            solution: '$(solution)'
            msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
            platform: '$(buildPlatform)'
            configuration: '$(buildConfiguration)'
        - task: SonarQubeAnalyze@7
        - task: SonarQubePublish@7
          inputs:
            pollingTimeoutSec: '300'
        - task: VSTest@2
          inputs:
            platform: '$(buildPlatform)'
            configuration: '$(buildConfiguration)'
        - task: CopyFiles@2
          inputs:
            Contents: '**\bin\$(buildConfiguration)\**'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'

        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: '$(artifactName)'
            publishLocation: 'Container'

  - stage: Deploy
    displayName: 'Deploy to Azure App Service'
    dependsOn: Build
    condition: succeeded()
    jobs:
    - deployment: DeployWeb
      displayName: 'Deploy nopCommerce to Azure App Service'
      environment: 'dev'
      # pool:
      #   vmImage: 'windows-latest'
      strategy:
        runOnce:
          deploy:
            steps:
            # - download: current
            #   artifact: drop
            - task: AzureWebApp@1
              inputs:
                azureSubscription: 'azure-ado-connection-2'
                appType: 'webApp'
                appName: 'myapp-live'
                deployToSlotOrASE: true
                resourceGroupName: 'test-rg'
                slotName: 'staging'
                package: '$(Pipeline.Workspace)/drop/**/*.zip'
                deploymentMethod: 'auto'

  - stage: SwapSlots
    displayName: 'Swap Staging with Production'
    dependsOn: Deploy
    condition: succeeded()
    jobs:
      - job: Swap
        # pool:
        #   vmImage: 'windows-latest'
        steps:
          - task: ManualIntervention@8
            inputs:
              instructions: 'nareshnaramala4@gmail.com'
              emailRecipients: 'nareshnaramala4@gmail.com'
          - task: AzureAppServiceManage@0
            inputs:
              azureSubscription: 'azure-ado-connection-2'
              Action: 'Swap Slots'
              WebAppName: 'myapp-live'
              ResourceGroupName: 'test-rg'
              SourceSlot: 'staging'
              TargetSlot: 'production'
